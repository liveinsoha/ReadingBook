server:
  port: 8080

spring:
  config:
    activate:
      on-profile: deploy

  #  datasource:
  #    url: jdbc:h2:tcp://localhost/~/BookPlace
  #    username: sa
  #    password:
  #    driver-class-name: org.h2.Driver

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: ${SPRING_DATASOURCE_DRIVER}

  jpa:
    hibernate:
      ddl-auto: update #create update none
    properties:
      hibernate:
        default_batch_fetch_size: 100 # 페이징을 위한 IN 쿼리 발생. 100~1000 사이가 적당
        #show-sql: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
  rabbitmq:
    host: ${RABBITMQ_HOST} # RabbitMQ host ip
    port: ${RABBITMQ_PORT} # RabbitMQ port
    username: ${RABBITMQ_USERNAME} # RabbitMQ 웹 관리 콘솔 아이디
    password: ${RABBITMQ_PASSWORD} # RabbitMQ 웹 관리 콘솔 비밀번호
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${USERNAME}
    password: ${PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
    auth-code-expiration-millis: 1800000  # 30 * 60 * 1000 == 30분

rabbitmq:
  queue:
    name: ${RABBITMQ_QUEUE_NAME} # 사용할 queue 이름
  exchange:
    name: ${RABBITMQ_EXCHANGE_NAME} # 사용할 exchange 이름
  routing:
    key: ${RABBITMQ_ROUTING_KEY} # 사용할 routing key




cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ap-northeast-2
    s3:
      bucket: remoa
    stack:
      auto: false

logging:
  level:
    org:
      hibernate:
        SQL: debug
        org.hibernate.type: trace